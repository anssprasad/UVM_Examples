Only in tb_build_tbx_uvm/agents/apb_agent: apb_agent_bfm.sv
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_agent_config.svh tb_build_uvm/agents/apb_agent/apb_agent_config.svh
37,38c37
< virtual apb_driver_bfm DRIVER_BFM;
< virtual apb_monitor_bfm MONITOR_BFM;
---
> virtual apb_if APB;
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_agent_pkg.sv tb_build_uvm/agents/apb_agent/apb_agent_pkg.sv
25d24
< import apb_shared_pkg::*;
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_agent.svh tb_build_uvm/agents/apb_agent/apb_agent.svh
75c75
<   m_monitor.BFM = m_cfg.MONITOR_BFM;
---
>   m_monitor.APB = m_cfg.APB;
81c81
<     m_driver.BFM = m_cfg.DRIVER_BFM;
---
>     m_driver.APB = m_cfg.APB;
Only in tb_build_tbx_uvm/agents/apb_agent: apb_driver_bfm.sv
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_driver.svh tb_build_uvm/agents/apb_agent/apb_driver.svh
33c33
< virtual apb_driver_bfm BFM;
---
> virtual apb_if APB;
62,63c62,64
<      apb_seq_item_s req_s, rsp_s;
< 
---
>      APB.PSEL <= 0;
>      APB.PENABLE <= 0;
>      APB.PADDR <= 0;
64a66,67
>      repeat(req.delay)
>        @(posedge APB.PCLK);
66c69,83
<      if(psel_index < 0) begin
---
>      if(psel_index >= 0) begin
>        APB.PSEL[psel_index] <= 1;
>        APB.PADDR <= req.addr;
>        APB.PWDATA <= req.data;
>        APB.PWRITE <= req.we;
>        @(posedge APB.PCLK);
>        APB.PENABLE <= 1;
>        while (!APB.PREADY)
>          @(posedge APB.PCLK);
>        if(APB.PWRITE == 0)
>          begin
>            req.data = APB.PRDATA;
>          end
>      end
>      else begin
67a85
>        req.error = 1;
69,72d86
<      apb_seq_item_converter::from_class(req, req_s);
<      BFM.do_item(req_s, psel_index, rsp_s); 
<      apb_seq_item_converter::to_class(rsp, rsp_s);
<      req.copy(rsp);
74,75c88
<      //#0;
<      //#1; // Needed to hold the bus fields long enough for the monitor to get the info
---
>  //    #1; // Needed to hold the bus fields long enough for the monitor to get the info
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_if.sv tb_build_uvm/agents/apb_agent/apb_if.sv
12,23d11
<   modport driver_mp (
<     output PSEL, PENABLE, PWRITE, PADDR, PWDATA,
<     input PREADY, PRDATA,
<     input PCLK, PRESETn
<   );
< 
<   modport monitor_mp (
<     input PSEL, PENABLE, PWRITE, PADDR, PWDATA,
<     input PREADY, PRDATA,
<     input PCLK, PRESETn
<   );
< 
33c21
< endinterface: apb_if
---
> endinterface: apb_if
\ No newline at end of file
Only in tb_build_tbx_uvm/agents/apb_agent: apb_monitor_bfm.sv
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_monitor.svh tb_build_uvm/agents/apb_agent/apb_monitor.svh
33c33
< virtual apb_monitor_bfm BFM;
---
> virtual apb_if APB;
39,40d38
< protected apb_seq_item item;
< 
54d51
< extern function void end_of_elaboration_phase(uvm_phase phase);
58,59d54
< extern function void write(apb_seq_item_s item_s);
< 
68d62
<   item = apb_seq_item::type_id::create("item");
71,74d64
< function void apb_monitor::end_of_elaboration_phase(uvm_phase phase);
<   BFM.proxy = this;
< endfunction: end_of_elaboration_phase
< 
76,79d65
<   BFM.run(apb_index);
< endtask: run_phase
< 
< function void apb_monitor::write(apb_seq_item_s item_s);
80a67,69
>   apb_seq_item cloned_item;
> 
>   item = apb_seq_item::type_id::create("item");
82,85c71,92
<   apb_seq_item_converter::to_class(item, item_s);
<   this.item.copy(item);
<   ap.write(this.item);
< endfunction: write
---
>   forever begin
>     // Detect the protocol event on the TBAI virtual interface
>     @(posedge APB.PCLK);
>     if(APB.PREADY && APB.PSEL[apb_index])
>     // Assign the relevant values to the analysis item fields
>       begin
>         item.addr = APB.PADDR;
>         item.we = APB.PWRITE;
>         if(APB.PWRITE)
>           begin
>             item.data = APB.PWDATA;
>           end
>         else
>           begin
>             item.data = APB.PRDATA;
>           end
>         // Clone and publish the cloned item to the subscribers
>         $cast(cloned_item, item.clone());
>         ap.write(cloned_item);
>       end
>   end
> endtask: run_phase
diff -r tb_build_tbx_uvm/agents/apb_agent/apb_seq_item.svh tb_build_uvm/agents/apb_agent/apb_seq_item.svh
134,158d133
< class apb_seq_item_converter;
< 
<   static function void from_class(input apb_seq_item t, output apb_seq_item_vector_t v);
<     apb_seq_item_s s;
<     s.addr = t.addr;
<     s.data = t.data;
<     s.we = t.we;
<     s.delay = t.delay;
<     s.error = t.error;
<     v = s;
<   endfunction
< 
<   static function void to_class(output apb_seq_item t, input apb_seq_item_vector_t v);
<     apb_seq_item_s s;
<     s = v;
<     t = new();
<     t.addr = s.addr;
<     t.data = s.data;
<     t.we = s.we;
<     t.delay = s.delay;
<     t.error = s.error;
<   endfunction
< 
< endclass: apb_seq_item_converter
< 
Only in tb_build_tbx_uvm/agents/apb_agent: apb_shared_pkg.sv
Only in tb_build_tbx_uvm/agents/spi_agent: spi_agent_bfm.sv
diff -r tb_build_tbx_uvm/agents/spi_agent/spi_agent_config.svh tb_build_uvm/agents/spi_agent/spi_agent_config.svh
37,38c37
< virtual spi_driver_bfm DRIVER_BFM;
< virtual spi_monitor_bfm MONITOR_BFM;
---
> virtual spi_if SPI;
diff -r tb_build_tbx_uvm/agents/spi_agent/spi_agent.svh tb_build_uvm/agents/spi_agent/spi_agent.svh
72c72
<   m_monitor.BFM = m_cfg.MONITOR_BFM;
---
>   m_monitor.SPI = m_cfg.SPI;
77c77
<     m_driver.BFM = m_cfg.DRIVER_BFM;
---
>     m_driver.SPI = m_cfg.SPI;
Only in tb_build_tbx_uvm/agents/spi_agent: spi_driver_bfm.sv
Only in tb_build_tbx_uvm/agents/spi_agent: spi_driver_bfm.sv.with_displays
diff -r tb_build_tbx_uvm/agents/spi_agent/spi_driver.svh tb_build_uvm/agents/spi_agent/spi_driver.svh
33c33
< virtual spi_driver_bfm BFM;
---
> virtual spi_if SPI;
56a57
>   int no_bits;
58c59,62
<   BFM.init();
---
>   SPI.miso = 1;
>   while(SPI.cs === 8'hxx) begin
>     #1;
>   end
61a66,68
>     while(SPI.cs == 8'hff) begin
>       @(SPI.cs);
>     end
63c70,86
<     BFM.do_item(req.spi_data, req.no_bits, req.RX_NEG); 
---
>     no_bits = req.no_bits;
>     if(no_bits == 0) begin
>       no_bits = 128;
>     end
>     SPI.miso = req.spi_data[0];
>     for(int i = 1; i < no_bits-1; i++) begin
>       if(req.RX_NEG == 1) begin
>         @(posedge SPI.clk);
>       end
>       else begin
>         @(negedge SPI.clk);
>       end
>       SPI.miso = req.spi_data[i];
>       if(SPI.cs == 8'hff) begin
>         break;
>       end
>     end
diff -r tb_build_tbx_uvm/agents/spi_agent/spi_if.sv tb_build_uvm/agents/spi_agent/spi_if.sv
23,24c23
< interface spi_if(input PCLK,
<                  input PRESETn);
---
> interface spi_if;
30,43d28
< 
<   modport driver_mp (
<     output miso,
<     input cs,
<     input clk,
<     input PCLK, PRESETn
<   );
< 
<   modport monitor_mp (
<     input cs, miso, mosi,
<     input clk,
<     input PCLK, PRESETn
<   );
< 
Only in tb_build_tbx_uvm/agents/spi_agent: spi_monitor_bfm.sv
Only in tb_build_tbx_uvm/agents/spi_agent: spi_monitor_bfm.sv.for_study
diff -r tb_build_tbx_uvm/agents/spi_agent/spi_monitor.svh tb_build_uvm/agents/spi_agent/spi_monitor.svh
33c33
< virtual spi_monitor_bfm BFM;
---
> virtual spi_if SPI;
38d37
< protected spi_seq_item item;
53d51
< extern function void end_of_elaboration_phase(uvm_phase phase);
57,58d54
< extern function void write(logic[127:0] nedge_mosi, pedge_mosi, nedge_miso, pedge_miso, logic[7:0] cs);
< 
69,72d64
< function void spi_monitor::end_of_elaboration_phase(uvm_phase phase);
<   BFM.proxy = this;
< endfunction: end_of_elaboration_phase
< 
74,79c66
<   BFM.proxy = this;
<   item = spi_seq_item::type_id::create("item");
<   BFM.run();
< endtask: run_phase
< 
< function void spi_monitor::write(logic[127:0] nedge_mosi, pedge_mosi, nedge_miso, pedge_miso, logic[7:0] cs);
---
>   spi_seq_item item;
80a68,71
>   int n;
>   int p;
> 
>   item = spi_seq_item::type_id::create("item");
82,90c73,126
<   item.nedge_mosi = nedge_mosi;
<   item.pedge_mosi = pedge_mosi;
<   item.nedge_miso = nedge_miso;
<   item.pedge_miso = pedge_miso;
<   item.cs = cs;
<   // Clone and publish the cloned item to the subscribers
<   $cast(cloned_item, item.clone());
<   ap.write(cloned_item);
< endfunction: write
---
>   while(SPI.cs === 8'hxx) begin
>     #1;
>   end
> 
>   forever begin
> 
>     while(SPI.cs === 8'hff) begin
>       @(SPI.cs);
>     end
> 
>     n = 0;
>     p = 0;
>     item.nedge_mosi = 0;
>     item.pedge_mosi = 0;
>     item.nedge_miso = 0;
>     item.pedge_miso = 0;
>     item.cs = SPI.cs;
> 
>     fork
>       begin
>         while(SPI.cs != 8'hff) begin
>           @(SPI.clk);
>           if(SPI.clk == 1) begin
>             item.nedge_mosi[p] = SPI.mosi;
>             item.nedge_miso[p] = SPI.miso;
>             p++;
>           end
>           else begin
>             item.pedge_mosi[n] = SPI.mosi;
> 
>             item.pedge_miso[n] = SPI.miso;
>     //        $display("%t sample %0h, pedge_mosi[%0d] = %b", $time, item.pedge_mosi, n, SPI.mosi);
>             n++;
>           end
>         end
>       end
>       begin
>         @(SPI.clk);
>         @(SPI.cs);
>       end
>     join_any
>     disable fork;
> 
> /*
>     $display("nedge_mosi: %0h", item.nedge_mosi);
>     $display("pedge_mosi: %0h", item.pedge_mosi);
>     $display("nedge_miso: %0h", item.nedge_miso);
>     $display("pedge_miso: %0h", item.pedge_miso);
> */
>     // Clone and publish the cloned item to the subscribers
>     $cast(cloned_item, item.clone());
>     ap.write(cloned_item);
>   end
> endtask: run_phase
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/env/spi_env_config.svh tb_build_uvm/block_level_tbs/spi_tb/env/spi_env_config.svh
65d64
< extern task pound_delay(int n);
107c106
<   INTR.wait_for_interrupt();
---
>   @(posedge INTR.IRQ);
112c111,114
<   return (INTR.is_interrupt_cleared());
---
>   if(INTR.IRQ == 0)
>     return 1;
>   else
>     return 0;
115,131d116
< // This task is a convenience method for sequences and tests waiting for time
< // to elapse
< task spi_env_config::pound_delay(int n);
<   if(n == 0) begin
<     `uvm_error("SPI_ENV_CONFIG:", 
<        $sformatf("Argument n for pound_delay must be greater than zero"))
<   end
<   if (n % 20 == 0) begin
<     INTR.wait_n_cycles(n);
<   end
<   else begin
<     `uvm_warning("SPI_ENV_CONFIG:", 
<        $sformatf("Argument n=%0d for pound_delay not a multiple of 20; delay rounded up to next integer multiple %0d", n, (n/20+1)*20))
<     INTR.wait_n_cycles(n/20+1);
<   end
< endtask: pound_delay
< 
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/sim/Makefile tb_build_uvm/block_level_tbs/spi_tb/sim/Makefile
1d0
< MODE ?= puresim
9,10d7
< CPP_PATH = $(GNUHOME)/bin/gcc
< 
16,17c13
< 	vlib work.$(MODE)
< 	vmap work work.$(MODE)
---
> 	vlib work
19a16
> 	vlog +incdir+$(RTL)/spi/rtl/verilog $(RTL)/spi/rtl/verilog/*.v
22d18
< 	vlog +incdir+$(UVM_HOME)/src+$(AGENTS)/apb_agent $(AGENTS)/apb_agent/apb_shared_pkg.sv
25a22,24
> 	vlog $(AGENTS)/apb_agent/apb_if.sv -timescale 1ns/10ps
> 	vlog $(AGENTS)/spi_agent/spi_if.sv -timescale 1ns/10ps
> 	vlog ../tb/intr_if.sv -timescale 1ns/10ps
32,63d30
< ifeq ($(MODE),puresim)
< 	vlog +incdir+$(RTL)/spi/rtl/verilog $(RTL)/spi/rtl/verilog/*.v -timescale 1ns/10ps
< 	vlog $(AGENTS)/apb_agent/apb_if.sv -timescale 1ns/10ps
< 	vlog $(AGENTS)/spi_agent/spi_if.sv -timescale 1ns/10ps
< 	vlog ../tb/intr_if.sv -timescale 1ns/10ps
< 	vlog -timescale 1ns/10ps $(AGENTS)/apb_agent/apb_driver_bfm.sv
< 	vlog -timescale 1ns/10ps $(AGENTS)/apb_agent/apb_monitor_bfm.sv
< 	vlog -timescale 1ns/10ps $(AGENTS)/spi_agent/spi_driver_bfm.sv
< 	vlog -timescale 1ns/10ps $(AGENTS)/spi_agent/spi_monitor_bfm.sv
< 	vlog -timescale 1ns/10ps +incdir+$(RTL)/spi/rtl/verilog ../tb/top_hdl.sv
< 	vlog -timescale 1ns/10ps $(AGENTS)/apb_agent/apb_agent_bfm.sv
< 	vlog -timescale 1ns/10ps $(AGENTS)/spi_agent/spi_agent_bfm.sv
< else
< 	veanalyze +incdir+$(RTL)/spi/rtl/verilog $(RTL)/spi/rtl/verilog/*.v
< 	veanalyze $(AGENTS)/apb_agent/apb_if.sv
< 	veanalyze $(AGENTS)/spi_agent/spi_if.sv
< 	veanalyze ../tb/intr_if.sv
< 	veanalyze +incdir+$(UVM_HOME)/src+$(AGENTS)/apb_agent $(AGENTS)/apb_agent/apb_shared_pkg.sv
< 	veanalyze $(AGENTS)/apb_agent/apb_driver_bfm.sv
< 	veanalyze -extract_hvl_info +incdir+$(UVM_HOME)/src $(UVM_HOME)/src/uvm_pkg.sv
< 	veanalyze -extract_hvl_info +incdir+$(UVM_HOME)/src+$(AGENTS)/register_layering $(AGENTS)/register_layering/register_layering_pkg.sv
< 	veanalyze -extract_hvl_info +incdir+$(UVM_HOME)/src+$(AGENTS)/apb_agent $(AGENTS)/apb_agent/apb_agent_pkg.sv
< 	veanalyze $(AGENTS)/apb_agent/apb_monitor_bfm.sv
< 	veanalyze $(AGENTS)/spi_agent/spi_driver_bfm.sv
< 	veanalyze -extract_hvl_info +incdir+$(UVM_HOME)/src+$(AGENTS)/spi_agent $(AGENTS)/spi_agent/spi_agent_pkg.sv
< 	veanalyze $(AGENTS)/spi_agent/spi_monitor_bfm.sv
< 	veanalyze +incdir+$(RTL)/spi/rtl/verilog ../tb/top_hdl.sv
< 	veanalyze $(AGENTS)/apb_agent/apb_agent_bfm.sv
< 	veanalyze $(AGENTS)/spi_agent/spi_agent_bfm.sv
< 	tbxcomp -top top_hdl -$(MODE) 
< 	tbxsvlink -veloce $(TBXSVLINK_BUILD_PLATFORM) -cpppath $(CPP_PATH)
< endif
66,71c33
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_interrupt_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
< 
< norun:
< 	vsim -c +tbxrun+norun top_tb top_hdl +UVM_TESTNAME=spi_interrupt_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_interrupt_test
74,75c36
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_interrupt_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_interrupt_test
78,79c39
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_debug_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_debug_test
82,83c42
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_poll_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_poll_test
86,87c45
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_reg_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_reg_test
90,91c48
< 	vsim -c -do "run -all" top_tb top_hdl +UVM_TESTNAME=spi_test -cpppath $(CPP_PATH)
< 	cp transcript transcript.$(MODE)
---
> 	vsim -c -do "run -all" top_tb +UVM_TESTNAME=spi_test
94,99c51
< 	@rm -rf *~ vsim.wlf *.log *.tgz kijk modelsim.ini transcript
< ifeq ($(MODE),puresim)
< 	@rm -rf work.puresim
< else
< 	@rm -rf work.veloce debussy.cfg dgs.dbg dmslogdir tbxbindings.h* tbx.dir tbx.map tbxsim.v
< endif
---
> 	@rm -rf work transcript *~ vsim.wlf *.log *.tgz
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: tbx.config
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_debug_test.puresim
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_debug_test.veloce
Only in tb_build_uvm/block_level_tbs/spi_tb/sim: transcript.gold
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_interrupt_test.puresim
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_interrupt_test.veloce
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_poll_test.puresim
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_poll_test.veloce
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_reg_test.puresim
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/sim: transcript_reg_test.veloce
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/tb/intr_if.sv tb_build_uvm/block_level_tbs/spi_tb/tb/intr_if.sv
22,24c22,23
< interface intr_if(input PCLK,
<                   input PRESETn);
< // pragma attribute intr_if partition_interface_xif
---
> // Note signal bundle only
> interface intr_if;
28,49d26
<   task wait_for_interrupt(); // pragma tbx xtf
<     @(posedge IRQ);
< /*
<     @(posedge PCLK);
<     wait(IRQ == 1);
<     @(posedge PCLK);
< */
<   endtask: wait_for_interrupt
< 
<   function bit is_interrupt_cleared(); // pragma tbx xtf
<     if(IRQ == 0)
<       return 1;
<     else
<       return 0;
<   endfunction: is_interrupt_cleared
< 
<   task wait_n_cycles(int n); // pragma tbx xtf
<     @(posedge PCLK);
<     assert(n>0);
<     repeat (n-1) @(posedge PCLK);
<   endtask: wait_n_cycles
< 
Only in tb_build_tbx_uvm/block_level_tbs/spi_tb/tb: top_hdl.sv
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/tb/top_tb.sv tb_build_uvm/block_level_tbs/spi_tb/tb/top_tb.sv
21a22,23
> `include "timescale.v"
> 
24a27,61
> // PCLK and PRESETn
> //
> logic PCLK;
> logic PRESETn;
> 
> //
> // Instantiate the interfaces:
> //
> apb_if APB(PCLK, PRESETn);   // APB interface
> spi_if SPI();  // SPI Interface
> intr_if INTR();   // Interrupt
> 
> // DUT
> spi_top DUT(
>     // APB Interface:
>     .PCLK(PCLK),
>     .PRESETN(PRESETn),
>     .PSEL(APB.PSEL[0]),
>     .PADDR(APB.PADDR[4:0]),
>     .PWDATA(APB.PWDATA),
>     .PRDATA(APB.PRDATA),
>     .PENABLE(APB.PENABLE),
>     .PREADY(APB.PREADY),
>     .PSLVERR(),
>     .PWRITE(APB.PWRITE),
>     // Interrupt output
>     .IRQ(INTR.IRQ),
>     // SPI signals
>     .ss_pad_o(SPI.cs),
>     .sclk_pad_o(SPI.clk),
>     .mosi_pad_o(SPI.mosi),
>     .miso_pad_i(SPI.miso)
> );
> 
> 
25a63
> // Virtual interface wrapping & run_test()
26a65,67
>   uvm_config_db #(virtual apb_if)::set(null, "uvm_test_top", "APB_vif" , APB);
>   uvm_config_db #(virtual spi_if)::set(null, "uvm_test_top", "SPI_vif" , SPI);
>   uvm_config_db #(virtual intr_if)::set(null, "uvm_test_top", "INTR_vif" , INTR);
28c69,84
<   //$finish;
---
>   $finish;
> end
> 
> //
> // Clock and reset initial block:
> //
> initial begin
>   PCLK = 0;
>   PRESETn = 0;
>   repeat(8) begin
>     #10ns PCLK = ~PCLK;
>   end
>   PRESETn = 1;
>   forever begin
>     #10ns PCLK = ~PCLK;
>   end
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_debug_test.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_debug_test.svh
59c59
<   m_env_cfg.pound_delay(100); 
---
>   #100ns;
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_interrupt_test.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_interrupt_test.svh
59c59
<   m_env_cfg.pound_delay(100); 
---
>   #100ns;
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_poll_test.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_poll_test.svh
59c59
<   m_env_cfg.pound_delay(100); 
---
>   #100ns;
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_reg_test.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_reg_test.svh
59c59
<   m_env_cfg.pound_delay(100); 
---
>   #100ns;
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_test_base.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_test_base.svh
67d66
< 
71d69
< 
75,78c73,74
<   if (!uvm_config_db #(virtual apb_driver_bfm)::get(this, "", "top_hdl.APB_DRIVER", m_apb_cfg.DRIVER_BFM))
<     `uvm_error("build_phase", "uvm_config_db #(virtual apb_driver_bfm)::get(...) failed");
<   if (!uvm_config_db #(virtual apb_monitor_bfm)::get(this, "", "top_hdl.APB_MONITOR", m_apb_cfg.MONITOR_BFM))
<     `uvm_error("build_phase", "uvm_config_db #(virtual apb_monitor_bfm)::get(...) failed");
---
>   if (!uvm_config_db #(virtual apb_if)::get(this, "", "APB_vif", m_apb_cfg.APB))
>     `uvm_error("build_phase", "uvm_config_db #(virtual apb_if)::get(...) failed");
80d75
< 
83,86c78,79
<   if (!uvm_config_db #(virtual spi_driver_bfm)::get(this, "", "top_hdl.SPI_DRIVER", m_spi_cfg.DRIVER_BFM))
<     `uvm_error("build_phase", "uvm_config_db #(virtual spi_driver_bfm)::get(...) failed");
<   if (!uvm_config_db #(virtual spi_monitor_bfm)::get(this, "", "top_hdl.SPI_MONITOR", m_spi_cfg.MONITOR_BFM))
<     `uvm_error("build_phase", "uvm_config_db #(virtual spi_monitor_bfm)::get(...) failed");
---
>   if (!uvm_config_db #(virtual spi_if)::get(this, "", "SPI_vif", m_spi_cfg.SPI))
>     `uvm_error("build_phase", "uvm_config_db #(virtual spi_if)::get(...) failed");
89d81
< 
91c83
<   if (!uvm_config_db #(virtual intr_if)::get(this, "", "top_hdl.INTR", m_env_cfg.INTR))
---
>   if (!uvm_config_db #(virtual intr_if)::get(this, "", "INTR_vif", m_env_cfg.INTR))
95d86
< 
diff -r tb_build_tbx_uvm/block_level_tbs/spi_tb/test/spi_test.svh tb_build_uvm/block_level_tbs/spi_tb/test/spi_test.svh
67c67
<   m_env_cfg.pound_delay(100); 
---
>   #100ns;
Binary files tb_build_tbx_uvm/rtl/spi/doc/src/spi.doc and tb_build_uvm/rtl/spi/doc/src/spi.doc differ
diff -r tb_build_tbx_uvm/rtl/spi/rtl/verilog/spi_top.v tb_build_uvm/rtl/spi/rtl/verilog/spi_top.v
140c140
<       default:      wb_dat = 32'b0;
---
>       default:      wb_dat = 32'bx;
diff -r tb_build_tbx_uvm/rtl/spi/rtl/verilog/timescale.v tb_build_uvm/rtl/spi/rtl/verilog/timescale.v
1c1
< //`timescale 1ns / 10ps
---
> `timescale 1ns / 10ps
